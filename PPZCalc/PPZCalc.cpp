#include "hls_stream.h"
#include "hls_math.h"
#include "PPZCalc.h"
#include "Sort.h"

fZ C0_L1E08 = 1558.859292;
fZ C1_L1E08 = -4.990838;
fZ C2_L1E08 = -21.144279;

fZ C0_L1E15 = 1522.775373;
fZ C1_L1E15 = 27.970192;
fZ C2_L1E15 = -21.104108;

fZ C0_L1E25 = 3790.671754;

fZ C0_L2E1425 = 1698.990944;
fZ C1_L2E1425 = -49.431767;
fZ C2_L2E1425 = -24.504976;

fZ C0_L2E15 = 8027.574119;
fZ C1_L2E15 = -2717.653528;

fZ C0_L2E25 = 3473.473909;
fZ C1_L2E25 = 453.941515;
fZ C2_L2E25 = -119.101945;

fZ CZero = 0.0;
fEta SinhMap_eightBitsDecimal[641] = {0.0, 0.00390626, 0.00781258, 0.01171902, 0.01562564, 0.01953249, 0.02343965, 0.02734716, 0.03125509, 0.03516349, 0.03907243, 0.04298197, 0.04689217, 0.05080308, 0.05471476, 0.05862728, 0.0625407, 0.06645507, 0.07037045, 0.07428691, 0.0782045, 0.08212328, 0.08604332, 0.08996467, 0.09388739, 0.09781154, 0.10173719, 0.10566439, 0.1095932, 0.11352369, 0.11745591, 0.12138991, 0.12532578, 0.12926355, 0.13320329, 0.13714507, 0.14108894, 0.14503497, 0.14898321, 0.15293372, 0.15688656, 0.1608418, 0.16479949, 0.1687597, 0.17272248, 0.1766879, 0.18065601, 0.18462688, 0.18860057, 0.19257713, 0.19655663, 0.20053914, 0.2045247, 0.20851338, 0.21250525, 0.21650036, 0.22049877, 0.22450054, 0.22850574, 0.23251443, 0.23652667, 0.24054251, 0.24456203, 0.24858528, 0.25261232, 0.25664321, 0.26067802, 0.26471681, 0.26875964, 0.27280657, 0.27685766, 0.28091298, 0.28497258, 0.28903653, 0.29310489, 0.29717772, 0.30125509, 0.30533706, 0.30942368, 0.31351503, 0.31761116, 0.32171213, 0.32581802, 0.32992887, 0.33404476, 0.33816575, 0.3422919, 0.34642327, 0.35055993, 0.35470193, 0.35884935, 0.36300224, 0.36716068, 0.37132471, 0.37549441, 0.37966984, 0.38385107, 0.38803815, 0.39223115, 0.39643014, 0.40063517, 0.40484632, 0.40906365, 0.41328722, 0.41751709, 0.42175334, 0.42599602, 0.4302452, 0.43450095, 0.43876333, 0.4430324, 0.44730823, 0.45159089, 0.45588043, 0.46017694, 0.46448046, 0.46879108, 0.47310884, 0.47743383, 0.4817661, 0.48610572, 0.49045276, 0.49480728, 0.49916935, 0.50353904, 0.50791642, 0.51230154, 0.51669448, 0.52109531, 0.52550408, 0.52992088, 0.53434576, 0.53877879, 0.54322004, 0.54766959, 0.55212749, 0.55659381, 0.56106863, 0.56555201, 0.57004402, 0.57454473, 0.5790542, 0.58357251, 0.58809973, 0.59263592, 0.59718115, 0.60173549, 0.60629902, 0.61087179, 0.61545389, 0.62004538, 0.62464633, 0.62925681, 0.63387689, 0.63850665, 0.64314615, 0.64779546, 0.65245466, 0.65712381, 0.66180299, 0.66649226, 0.67119171, 0.6759014, 0.6806214, 0.68535179, 0.69009264, 0.69484401, 0.69960599, 0.70437864, 0.70916204, 0.71395627, 0.71876138, 0.72357746, 0.72840459, 0.73324283, 0.73809226, 0.74295295, 0.74782497, 0.75270841, 0.75760333, 0.76250982, 0.76742793, 0.77235776, 0.77729937, 0.78225285, 0.78721826, 0.79219568, 0.79718519, 0.80218686, 0.80720078, 0.81222701, 0.81726564, 0.82231673, 0.82738038, 0.83245664, 0.83754561, 0.84264736, 0.84776197, 0.85288952, 0.85803007, 0.86318372, 0.86835055, 0.87353062, 0.87872402, 0.88393083, 0.88915112, 0.89438499, 0.8996325, 0.90489374, 0.91016878, 0.91545772, 0.92076062, 0.92607758, 0.93140866, 0.93675395, 0.94211354, 0.94748751, 0.95287593, 0.9582789, 0.96369648, 0.96912877, 0.97457585, 0.98003779, 0.9855147, 0.99100664, 0.9965137, 1.00203597, 1.00757352, 1.01312645, 1.01869485, 1.02427878, 1.02987834, 1.03549362, 1.0411247, 1.04677167, 1.05243461, 1.0581136, 1.06380874, 1.06952012, 1.07524781, 1.08099192, 1.08675251, 1.09252969, 1.09832354, 1.10413415, 1.1099616, 1.115806, 1.12166742, 1.12754595, 1.13344169, 1.13935472, 1.14528514, 1.15123304, 1.1571985, 1.16318162, 1.16918249, 1.17520119, 1.18123783, 1.1872925, 1.19336528, 1.19945627, 1.20556556, 1.21169325, 1.21783943, 1.22400419, 1.23018762, 1.23638983, 1.24261091, 1.24885094, 1.25511003, 1.26138827, 1.26768576, 1.2740026, 1.28033887, 1.28669468, 1.29307012, 1.29946529, 1.30588029, 1.31231522, 1.31877017, 1.32524525, 1.33174054, 1.33825616, 1.3447922, 1.35134876, 1.35792593, 1.36452383, 1.37114255, 1.37778219, 1.38444285, 1.39112464, 1.39782766, 1.404552, 1.41129778, 1.41806509, 1.42485404, 1.43166473, 1.43849727, 1.44535176, 1.4522283, 1.459127, 1.46604796, 1.4729913, 1.47995711, 1.4869455, 1.49395658, 1.50099046, 1.50804724, 1.51512703, 1.52222995, 1.52935608, 1.53650556, 1.54367848, 1.55087495, 1.55809509, 1.56533901, 1.57260681, 1.5798986, 1.58721451, 1.59455463, 1.60191908, 1.60930798, 1.61672143, 1.62415955, 1.63162245, 1.63911026, 1.64662307, 1.654161, 1.66172418, 1.66931272, 1.67692672, 1.68456632, 1.69223161, 1.69992273, 1.70763979, 1.71538291, 1.72315219, 1.73094778, 1.73876977, 1.7466183, 1.75449348, 1.76239543, 1.77032427, 1.77828012, 1.78626311, 1.79427335, 1.80231098, 1.8103761, 1.81846885, 1.82658935, 1.83473772, 1.84291408, 1.85111856, 1.85935129, 1.8676124, 1.875902, 1.88422022, 1.89256719, 1.90094305, 1.9093479, 1.9177819, 1.92624515, 1.9347378, 1.94325997, 1.9518118, 1.9603934, 1.96900492, 1.97764648, 1.98631822, 1.99502027, 2.00375276, 2.01251582, 2.02130959, 2.03013421, 2.0389898, 2.04787651, 2.05679446, 2.0657438, 2.07472466, 2.08373717, 2.09278149, 2.10185773, 2.11096605, 2.12010658, 2.12927946, 2.13848482, 2.14772282, 2.15699359, 2.16629728, 2.17563402, 2.18500395, 2.19440723, 2.20384399, 2.21331438, 2.22281854, 2.23235662, 2.24192877, 2.25153512, 2.26117583, 2.27085104, 2.2805609, 2.29030556, 2.30008516, 2.30989987, 2.31974982, 2.32963516, 2.33955606, 2.34951265, 2.35950509, 2.36953354, 2.37959814, 2.38969906, 2.39983643, 2.41001043, 2.4202212, 2.4304689, 2.44075368, 2.45107571, 2.46143514, 2.47183212, 2.48226683, 2.49273941, 2.50325003, 2.51379884, 2.52438601, 2.5350117, 2.54567607, 2.55637929, 2.56712151, 2.57790291, 2.58872363, 2.59958387, 2.61048376, 2.62142349, 2.63240322, 2.64342312, 2.65448335, 2.66558409, 2.6767255, 2.68790775, 2.69913102, 2.71039548, 2.72170129, 2.73304863, 2.74443767, 2.75586859, 2.76734157, 2.77885677, 2.79041437, 2.80201455, 2.81365748, 2.82534335, 2.83707233, 2.8488446, 2.86066034, 2.87251973, 2.88442295, 2.89637018, 2.90836161, 2.92039742, 2.93247778, 2.9446029, 2.95677295, 2.96898811, 2.98124857, 2.99355453, 3.00590617, 3.01830367, 3.03074722, 3.04323703, 3.05577326, 3.06835613, 3.08098582, 3.09366251, 3.10638642, 3.11915772, 3.13197662, 3.1448433, 3.15775798, 3.17072084, 3.18373208, 3.1967919, 3.20990049, 3.22305807, 3.23626483, 3.24952097, 3.26282669, 3.2761822, 3.2895877, 3.3030434, 3.3165495, 3.3301062, 3.34371372, 3.35737225, 3.37108202, 3.38484323, 3.39865608, 3.41252079, 3.42643758, 3.44040665, 3.45442821, 3.46850249, 3.48262969, 3.49681003, 3.51104373, 3.525331, 3.53967207, 3.55406714, 3.56851645, 3.58302021, 3.59757864, 3.61219196, 3.62686041, 3.64158419, 3.65636354, 3.67119869, 3.68608985, 3.70103725, 3.71604113, 3.73110172, 3.74621923, 3.76139391, 3.77662598, 3.79191568, 3.80726324, 3.82266889, 3.83813287, 3.85365542, 3.86923677, 3.88487716, 3.90057683, 3.91633602, 3.93215496, 3.94803391, 3.96397309, 3.97997277, 3.99603317, 4.01215455, 4.02833714, 4.04458121, 4.06088699, 4.07725474, 4.0936847, 4.11017712, 4.12673226, 4.14335037, 4.1600317, 4.17677651, 4.19358505, 4.21045758, 4.22739436, 4.24439564, 4.26146169, 4.27859276, 4.29578912, 4.31305103, 4.33037875, 4.34777254, 4.36523268, 4.38275942, 4.40035305, 4.41801381, 4.43574199, 4.45353785, 4.47140167, 4.48933372, 4.50733427, 4.52540359, 4.54354197, 4.56174968, 4.58002699, 4.59837419, 4.61679155, 4.63527936, 4.6538379, 4.67246746, 4.69116831, 4.70994074, 4.72878503, 4.74770149, 4.76669039, 4.78575202, 4.80488668, 4.82409465, 4.84337623, 4.86273172, 4.88216141, 4.90166559, 4.92124457, 4.94089864, 4.9606281, 4.98043326, 5.00031441, 5.02027186, 5.04030591, 5.06041687, 5.08060505, 5.10087075, 5.12121429, 5.14163597, 5.1621361, 5.182715, 5.20337298, 5.22411037, 5.24492746, 5.26582459, 5.28680206, 5.30786021, 5.32899935, 5.3502198, 5.37152189, 5.39290594, 5.41437229, 5.43592125, 5.45755315, 5.47926833, 5.50106712, 5.52294985, 5.54491685, 5.56696846, 5.58910502, 5.61132686, 5.63363432, 5.65602774, 5.67850747, 5.70107384, 5.72372721, 5.74646791, 5.7692963, 5.79221272, 5.81521753, 5.83831106, 5.86149368, 5.88476575, 5.9081276, 5.93157961, 5.95512212, 5.97875551, 6.00248012, 6.02629632, 6.05020448,};


void PPZCalcStream(hls::stream<fEta>& InputStreamEtaL1, hls::stream<fEta>& InputStreamEtaL2, hls::stream<fZ>& OutStream){
    #pragma HLS INTERFACE axis port = InputStreamEtaL1 depth=MaxN
    #pragma HLS INTERFACE axis port = InputStreamEtaL2 depth=MaxN
    #pragma HLS INTERFACE axis port = OutStream depth=MaxN

    // #pragma HLS DATAFLOW
    #pragma HLS pipeline II=1 
    

    for (int i = 0; i < MaxN; ++i){
        fEta EtaL1 = InputStreamEtaL1.read();
        fEta EtaL2 = InputStreamEtaL2.read();
        fZ PPZ = PPZ_calc(EtaL1, EtaL2);
        OutStream.write(PPZ);
    }
    
}

static fZ z1_eval(fEta aeta, fEta eta, fEta s1) {
  #pragma HLS INLINE region

  // Horner form, reuse s1 precomputed
  fZ z;
  if (aeta < 0.8) {
    // (1558.859292 - 4.990838*a - 21.144279*a^2) * s1
    z = CalcSecondOrder(aeta, C0_L1E08, C1_L1E08, C2_L1E08);
    z *= s1;
  } else if (aeta < 1.5) {
    // (1522.775373 + 27.970192*a - 21.104108*a^2) * s1
    z = CalcSecondOrder(aeta, C0_L1E15, C1_L1E15, C2_L1E15);
    z *= s1;
  } else {
    z = CalcSecondOrder(aeta, C0_L1E25, CZero, CZero);
    if (eta < 0) {z *= -1;}
  }
  return z;
}

static fZ z2_eval(fEta aeta, fEta eta, fEta s2) {
  #pragma HLS INLINE region

  fZ z;
  if (aeta < 1.425) {
    // (1698.990944 - 49.431767*a - 24.504976*a^2) * s2
    z = CalcSecondOrder(aeta, C0_L2E1425, C1_L2E1425, C2_L2E1425);
    z *= s2;
  } else if (aeta < 1.5) {
    // (8027.574119 - 2717.653528*a) * s2
    z = CalcSecondOrder(aeta, C0_L2E15, C1_L2E15, CZero);
    z *= s2;
  } else {
    z = CalcSecondOrder(aeta, C0_L2E25, C1_L2E25, C2_L2E25);
    if (eta < 0) z = -z;
  }
  return z;
}


fZ CalcSecondOrder(fEta aeta, fZ c0, fZ c1, fZ c2){
    return ((c2 * aeta) + c1) * aeta + c0;
}

fZ PPZ_calc(fEta eta1, fEta eta2){

   // #pragma HLS latency min=120
   

   if ((eta1 == EtaOverFlow) or (eta2 == EtaOverFlow) or (eta1 == eta2)){return PPZOverFlow;} // We can maybe recover eta1 == eta2....

    fEta aeta1 = hls::abs(eta1);
    fEta aeta2 = hls::abs(eta2);

    int s1Idx = 256 * aeta1;
    int s2Idx = 256 * aeta2;

    fEta s1 = SinhMap_eightBitsDecimal[s1Idx];
    fEta s2 = SinhMap_eightBitsDecimal[s2Idx];

    if (eta1 < 0){s1 *= -1;}
    if (eta2 < 0){s2 *= -1;}

    // #pragma HLS bind_op variable=aeta1 op=hmul
    // #pragma HLS bind_op variable=aeta2 op=hmul

    fZ Z1 = z1_eval(aeta1, eta1, s1);
    fZ Z2 = z2_eval(aeta2, eta2, s2);

    

    // Single reciprocal instead of division
    fZ num = (Z1 * Z2) * (s1 - s2);
    fZ den = (Z2 * s1) - (Z1 * s2);

    #ifndef __SYNTHESIS__
    std::cout << "s1Idx = " << s1Idx << ", s2Idx = " << s2Idx << std::endl;
    std::cout << "s1 = " << s1 << ", s2 = " << s2 << std::endl;
    std::cout << "Z1, Z2 = " << Z1 << ", " << Z2 << std::endl;
    std::cout << "num = " << num << ", den = " << den << ", num/den = " << num/den << std::endl;
    #endif

    fZ PPZ = num / den;
    return (PPZ);
}
